using System;
using System.Diagnostics;
using System.IO;
using Archiver;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Test
{
    [TestClass]
    public class PackagingTest
    {
        //Simulate compressed byte arrays wiht different size
        private static int m_minBufferSize = 1 * 1024 * 1024;
        private static int m_maxBufferSize = 2 * 1024 * 1024;

        private static int m_totalBlocks = 128;

        //[TestMethod]
        //public void PackageWriting()
        //{
        //    Console.WriteLine("CPipedStreamWriter");

        //    int chunkCounter = 0;
        //    long totalGeneratedBytesCounter = 0;
        //    long totalWrittenBytesCounter = 0;

        //    CPipedStreamWriter cw = CPipedStreamWriter.CreateInMemoryWriter();

        //    for (int i = 0; i < m_totalBlocks; i++)
        //    {
        //        CProcessingBlock processingChunk = GenerateBlock(m_minBufferSize, m_maxBufferSize, chunkCounter);
        //        totalGeneratedBytesCounter += processingChunk.Length;
        //        totalWrittenBytesCounter += cw.WriteBlock(processingChunk.blockInfo);
        //        chunkCounter++;
        //    }

        //    Console.WriteLine("Total generated bytes: {0}", totalGeneratedBytesCounter);
        //    Console.WriteLine("Total written bytes counter: {0}", totalWrittenBytesCounter);
        //    Console.WriteLine("Total generated chunks count: {0}", chunkCounter);
        //    Console.WriteLine("Total written chunks counter: {0}", cw.WrittenBlocks);

        //    cw.Dispose();

        //    Assert.IsTrue(
        //        totalWrittenBytesCounter == totalGeneratedBytesCounter &&
        //        chunkCounter == cw.WrittenBlocks
        //        );
        //}

        [TestMethod]
        public void CompressedBlocksPackager()
        {
            Console.WriteLine("CPipedStreamWriter");
            Stopwatch sw = Stopwatch.StartNew();

            int blocksCounter = 0;
            long totalGeneratedBytesCounter = 0;
            long totalWrittenBytesCounter = 0;

            MemoryStream ms = new MemoryStream();
            CCompressedBlocksPackagerOptions options = new CCompressedBlocksPackagerOptions(ECompressionAlgorithms.NoCompression);
            CBlocksPackager blocksPackager = new CBlocksPackager(ms, options);

            for (int i = 0; i < m_totalBlocks; i++)
            {
                CProcessingBlock block = GenerateBlock(m_minBufferSize, m_maxBufferSize, i);
                blocksPackager.WriteBlock(block);
                blocksCounter++;
            }

            CPackage package = blocksPackager.SealPackage();
            CPackageSummaryInfo summaryInfo = package.SummaryInfo;
            String serializedSummary = CPackageSummaryInfo.Serialize(summaryInfo).SerializeToString();
            Console.WriteLine(serializedSummary);
            Console.WriteLine($"Elapsed: {sw.ElapsedMilliseconds} ms");

            blocksPackager.Dispose();
        }

        public CProcessingBlock GenerateBlock(int sizeMin, int sizeMax, int blockNum)
        {
            Random rand = new Random();
            byte[] buffer = new byte[rand.Next(sizeMin, sizeMax)];

            rand.NextBytes(buffer);

            return CProcessingBlock.CreateBlock(buffer, blockNum);
        }
    }
}
